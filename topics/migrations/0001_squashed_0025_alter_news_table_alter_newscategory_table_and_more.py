# Generated by Django 5.0.7 on 2025-02-15 09:23

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("topics", "0001_squashed_0001_initial"),
        ("topics", "0002_alter_topics_order_id_alter_topics_title"),
        ("topics", "0003_topics_response_path"),
        ("topics", "0004_alter_topics_difficulty_score"),
        ("topics", "0005_alter_topics_points"),
        ("topics", "0006_alter_topics_category_alter_topics_difficulty_and_more"),
        ("topics", "0007_alter_topics_des_alter_topics_goal_and_more"),
        ("topics", "0008_topics_created_at_topics_updated_at_and_more"),
        ("topics", "0009_remove_topics_created_at_remove_topics_updated_at"),
        ("topics", "0010_topics_created_at_topics_updated_at"),
        ("topics", "0011_remove_topics_created_at_remove_topics_updated_at"),
        ("topics", "0012_topics_created_at_topics_updated_at"),
        ("topics", "0013_remove_topics_created_at_remove_topics_updated_at"),
        ("topics", "0014_topics_created_at_topics_updated_at"),
        ("topics", "0015_topics_api_type"),
        ("topics", "0016_topics_api_prefix"),
        ("topics", "0017_topics_answer"),
        ("topics", "0018_topics_published"),
        ("topics", "0019_alter_topics_created_at_alter_topics_updated_at"),
        (
            "topics",
            "0020_category_rename_des_topics_detail_alter_topics_title_and_more",
        ),
        ("topics", "0021_alter_category_table_and_more"),
        ("topics", "0022_alter_category_name"),
        ("topics", "0023_alter_topics_answer"),
        ("topics", "0024_newscategory_newsplatform_news"),
        ("topics", "0025_alter_news_table_alter_newscategory_table_and_more"),
    ]

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "name",
                    models.PositiveIntegerField(
                        blank=True, default=3, help_text="类别名", null=True
                    ),
                ),
                (
                    "detail",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="类别的描述",
                        max_length=200,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Topics",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "order_id",
                    models.PositiveIntegerField(
                        blank=True,
                        default=3,
                        help_text="题目排序，根据难度分排序，会变",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="题目的标题，最好有趣个性化一点",
                        max_length=200,
                    ),
                ),
                (
                    "detail",
                    models.TextField(
                        blank=True,
                        default="暂无表述",
                        help_text="题目的描述：简单创造一个背景故事",
                        null=True,
                    ),
                ),
                (
                    "goal",
                    models.TextField(
                        blank=True,
                        default="暂无描述",
                        help_text="题目的目标：掌握xxx",
                        null=True,
                    ),
                ),
                (
                    "question",
                    models.TextField(
                        blank=True,
                        default="暂无题目要求",
                        help_text="题目要求",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        default="成神之路",
                        help_text="题目类别：成神之路，xpath特训",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("beginner", "初级"),
                            ("intermediate", "中级"),
                            ("advanced", "高级"),
                            ("ultimate", "终极"),
                        ],
                        default="简单",
                        help_text="难度",
                        max_length=12,
                        null=True,
                    ),
                ),
                (
                    "difficulty_score",
                    models.BigIntegerField(
                        blank=True,
                        default=200,
                        help_text="难度分数，后续根据此字段排序order_id",
                        null=True,
                    ),
                ),
                (
                    "points",
                    models.TextField(
                        blank=True,
                        default="暂未更新考点",
                        help_text="本题的考点",
                        null=True,
                    ),
                ),
                (
                    "pass_status",
                    models.BooleanField(
                        blank=True, default=False, help_text="是否通过", null=True
                    ),
                ),
                (
                    "solution_txt",
                    models.URLField(
                        blank=True,
                        default="暂无表述",
                        help_text="题解，图文讲解",
                        null=True,
                    ),
                ),
                (
                    "solution_video",
                    models.URLField(
                        blank=True, default="暂无表述", help_text="视频讲解", null=True
                    ),
                ),
                (
                    "response_path",
                    models.TextField(
                        blank=True, help_text="题目路径【文件名】", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "api_type",
                    models.CharField(
                        blank=True,
                        default="直接对应视图",
                        help_text="此题目的接口类型：直接对应视图，访问一个接口判断后决定是否返回视图，返回一个视图+【多个】api",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "api_prefix",
                    models.CharField(
                        blank=True,
                        default="topic/",
                        help_text="topic/,view/,api/",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "answer",
                    models.CharField(
                        blank=True,
                        default="666",
                        help_text="题目的答案",
                        max_length=255,
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        blank=True, default=False, help_text="是否发布", null=True
                    ),
                ),
            ],
            options={
                "ordering": ["order_id"],
            },
        ),
        migrations.CreateModel(
            name="TopicCategoryRelation",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "display_order",
                    models.PositiveIntegerField(blank=True, default=100, null=True),
                ),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="topics.category",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="topics.topics"
                    ),
                ),
            ],
            options={
                "unique_together": {("topic", "category")},
            },
        ),
        migrations.AlterModelTable(
            name="category",
            table="sd_ls_category",
        ),
        migrations.AlterModelTable(
            name="topiccategoryrelation",
            table="sd_ls_topic_category_relation",
        ),
        migrations.AlterModelTable(
            name="topics",
            table="sd_ls_topic",
        ),
        migrations.AlterField(
            model_name="category",
            name="name",
            field=models.CharField(
                blank=True, help_text="类别名", max_length=200, null=True
            ),
        ),
        migrations.AlterField(
            model_name="topics",
            name="answer",
            field=models.CharField(
                blank=True, help_text="题目的答案", max_length=255, null=True
            ),
        ),
        migrations.CreateModel(
            name="NewsCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NewsPlatform",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("slug", models.SlugField(unique=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="News",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=200)),
                ("url", models.URLField()),
                ("publish_time", models.DateTimeField(blank=True, null=True)),
                ("content", models.TextField()),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="news",
                        to="topics.newscategory",
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="news",
                        to="topics.newsplatform",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterModelTable(
            name="news",
            table="sd_ls_news",
        ),
        migrations.AlterModelTable(
            name="newscategory",
            table="sd_ls_news_category",
        ),
        migrations.AlterModelTable(
            name="newsplatform",
            table="sd_ls_news_platform",
        ),
    ]
